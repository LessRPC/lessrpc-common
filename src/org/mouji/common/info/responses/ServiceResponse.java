package org.mouji.common.info.responses;

import org.mouji.common.info.SerializedObject;
import org.mouji.common.info.ServiceInfo;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * <p>
 * Every call to /execute method will result with a response from the
 * ServiceProvider which will follow the specifications below for a
 * ServiceResponse object. LESS-RPC unlike
 * <a href="http://www.jsonrpc.org/specification">JSON-RPC</a> does not
 * differentiate between normal method calls and notifications. However, the
 * response for notifications will be minimal. Requiring a response for
 * notification can assure client application whether the service provider has
 * been successful in retrieving and processing the notification.
 * ServiceResponse object contains the following fields:
 * </p>
 * <ul style="list-style-type: circle; margin-left: 3em;">
 * <li><strong>service*: </strong>Instance of ServiceInfo object</li>
 * <li><strong>rid*: </strong>contains the request id generated for the request.
 * request id can be used by the client to identify responses in asynchronous or
 * batch mode.</li>
 * <li><strong>status*: </strong> result status code</li>
 * <li><strong>content*: </strong> result object which must be contain fields of
 * a SerializedObject if the result is a value. In case the function called is
 * finished with an error status the content will contain additional information
 * regarding the error in plain text format</li>
 * </ul>
 * <br/>
 * </p>
 * 
 * @author Salim
 *
 */
public class ServiceResponse<T>{

	/**
	 * service information
	 */
	private ServiceInfo<?> service;

	/**
	 * execution response info including status and result object type
	 */
	/**
	 * result content
	 */
	private SerializedObject<T> content;

	/**
	 * request id generated by user
	 */
	private long requestId;

	public ServiceResponse(ServiceInfo<?> service, SerializedObject<T> content, long requesId) {
		this.service = service;
		this.content = content;
		requestId = requesId;
	}

	/**
	 * dummy constructor for RPC
	 */
	public ServiceResponse() {
	}

	@JsonIgnore
	public T getContent() {
		return content.getContent();
	}

	@JsonIgnore
	public void setContent(SerializedObject<T> content) {
		this.content = content;
	}

	@JsonProperty("content")
	public SerializedObject<T> getSerializedObject() {
		return content;
	}

	@JsonProperty("content")
	public void setSerializedObject(SerializedObject<T> content) {
		this.content = content;
	}

	@JsonProperty("rid")
	public long getRequestId() {
		return requestId;
	}

	@JsonProperty("rid")
	public void setRequestId(long requestId) {
		this.requestId = requestId;
	}

	public ServiceInfo<?> getService() {
		return service;
	}

	public void setService(ServiceInfo<?> service) {
		this.service = service;
	}

	@Override
	public String toString() {
		try {
			return new ObjectMapper(new JsonFactory()).writeValueAsString(this);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return super.toString();
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof ServiceResponse<?>))
			return false;
		ServiceResponse<?> sr = (ServiceResponse<?>) obj;

		if (!sr.service.equals(this.getService()))
			return false;

		if (!(sr.getRequestId() == this.requestId)) {
			return false;
		}
		
		if (!sr.getContent().equals(this.getContent()))
			return false;

		return true;
	}

}
